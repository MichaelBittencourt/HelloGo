go version #check version
go mod init example/hello #init module can be a github path as example
vim go.mod #the go mod create this file
vim hello.go #The source code
go run . #run the main function on my current main package that is the current folder
go help #show help commands
go build . #build the current folder to generate a binary
go run hello.go #run the hello.go file
go mod tidy #found all imports that are not downloaded and download. update go.mod and go.sum
vim go.mod
vim go.sum
go run .
go build

###### I can edit the path of a specific package ########

go mod edit -replace example.com/greetings=../greetings

#this will add something like this on go.mod
# module example.com/hello
#
# go 1.16
#
# replace example.com/greetings => ../greetings

#To update or get a specific version
# you can get from a specific commit hash tag version and I think, a branch
go get github.com/MichaelBittencourt/greatings@latest

#To do unit tests you need create a files with end _test.go with tests and run test command

go test #run unit test and show OK or FAIL

go test -v #run unit test verbose

#To discover where go will install the package you can use go list command

go list -f '{{.Target}}'

# You also can use a path already in you shell path to set to install your binaries

go env -w GOBIN=/path/to/your/bin #path to you bin folder


